CREATE TABLE sql_prompt_examples (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    example_input VARCHAR2(4000),
    example_output CLOB
);

INSERT INTO sql_prompt_examples (example_input, example_output) VALUES (
    'Get total sales amount per region.',
    'SELECT region, SUM(total_amount)
     FROM sales
     GROUP BY region'
);

INSERT INTO sql_prompt_examples (example_input, example_output) VALUES (
    'Find all sales records for product_id 101 sold in January 2025.',
    'SELECT *
     FROM sales
     WHERE product_id = 101
       AND sale_date BETWEEN TO_DATE(''2025-01-01'', ''YYYY-MM-DD'') AND TO_DATE(''2025-01-31'', ''YYYY-MM-DD'')'
);

INSERT INTO sql_prompt_examples (example_input, example_output) VALUES (
    'List the top 3 products by total sales amount.',
    'SELECT product_id, SUM(total_amount)
     FROM sales
     GROUP BY product_id
     ORDER BY SUM(total_amount) DESC
     FETCH FIRST 3 ROWS ONLY'
);


INSERT INTO sql_prompt_examples (example_input, example_output) VALUES (
    'Get total sales for customer_id 55 in 2023.',
    'SELECT SUM(total_amount) FROM sales WHERE customer_id = 55  AND sale_date BETWEEN TO_DATE(''2023-01-01'', ''YYYY-MM-DD'') AND TO_DATE(''2023-12-31'', ''YYYY-MM-DD'')'
);


INSERT INTO sql_prompt_examples (example_input, example_output)
VALUES (
    'List all distinct products.',
    'SELECT DISTINCT product_id FROM products'
);

INSERT INTO sql_prompt_examples (example_input, example_output)
VALUES (
    'List all unique product identifiers.',
    'SELECT DISTINCT product_id FROM products'
);

INSERT INTO sql_prompt_examples (example_input, example_output)
VALUES (
    'List all products',
    'SELECT * FROM products'
);

commit;

select * from sql_prompt_examples;


CREATE TABLE sql_prompt_examples_embedded (
    id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    example_input CLOB,
    example_sql CLOB,
    embedding BLOB
);

create table rado_sql_queries(endpoint_name varchar2(4000) , sql_text clob); 

INSERT INTO rado_sql_queries (endpoint_name, sql_text) VALUES (
  'customer_sales_july',
  'SELECT * FROM sales WHERE customer_id = {customer_id} AND sale_date = TO_DATE(''{sale_date}'', ''YYYY-MM-DD'')'
);

INSERT INTO rado_sql_queries (endpoint_name, sql_text) VALUES (
  'all_customer_sales',
  'SELECT * FROM sales'
);

INSERT INTO rado_sql_queries (endpoint_name, sql_text) VALUES (
  'all_products',
  'SELECT * FROM products'
);

INSERT INTO rado_sql_queries (endpoint_name, sql_text) VALUES (
  'customer_sales_by_id',
  'SELECT * FROM sales WHERE customer_id = {customer_id} AND sale_date = TO_DATE(''{sale_date}'', ''YYYY-MM-DD'') AND sale_id = {sale_id}'
);



CREATE TABLE api_mappings (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    intent VARCHAR2(500),
    endpoint VARCHAR2(200),
    expected_params CLOB
);


INSERT INTO api_mappings (intent, endpoint, expected_params)
VALUES (
    'show all by customer id and specific date',
    '/execute/customer_sales',
    '["customer_id", "sale_date"]'
);

INSERT INTO api_mappings (intent, endpoint, expected_params)
VALUES (
    'Show all customer sales',
    '/execute/all_customer_sales',
    '[]'
);

INSERT INTO api_mappings (intent, endpoint, expected_params)
VALUES (
    'Show all products',
    '/execute/all_products',
    '[]'
);

INSERT INTO api_mappings (intent, endpoint, expected_params)
VALUES (
    'get sales by customer id , specific date and sale id',
    '/execute/customer_sales_by_id',
    '["customer_id", "sale_date", "sale_id"]'
);


select * from SQL_PROMPT_EXAMPLES;

-- Get total sales amount per region.
-- Find all sales records for product_id 101 sold in January 2025.
-- List the top 3 products by total sales amount.


select * from SQL_PROMPT_EXAMPLES_embedded;

-- Get total sales per region
-- Show total revenue for customer 101 in 2023
-- List all sales in January 2024
 



select * from api_mappings;

-- show all by customer id and specific date
-- Show all customer sales
-- Show all products
-- show all by customer id and specific date and sale id

select * from rado_sql_queries;

-- customer_sales
-- all_customer_sales
-- all_products

commit;


-- Create Oracle table for storing document embeddings

CREATE TABLE DOCUMENT_EMBEDDINGS (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    doc_id VARCHAR2(255) UNIQUE NOT NULL,
    embedding CLOB NOT NULL, -- store as JSON array text for simplicity
    text_content CLOB NOT NULL
);

CREATE TABLE RISK_METADATA (
  column_name VARCHAR2(100),
  data_type VARCHAR2(50),
  description VARCHAR2(400)
);

CREATE TABLE DATA_QUERIES (
  source_type VARCHAR2(20), -- 'hive' | 'parquet' | 'oracle'
  query_or_path CLOB
);



-- Table for SQL templates with embeddings and parameters

CREATE TABLE query_templates (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    intent_text VARCHAR2(500) NOT NULL,  -- description for semantic matching
    sql_template CLOB NOT NULL,          -- template SQL with {param} placeholders
    embedding BLOB NOT NULL,             -- vector embedding of intent_text
    parameters CLOB                      -- JSON array of parameter definitions (optional)
);

