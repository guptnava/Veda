
-- Drop existing objects (ignore missing object errors)
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE fact_csa_val_sens PURGE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE dim_source PURGE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE dim_risk_factor PURGE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE dim_trade PURGE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE dim_instrument PURGE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE dim_product PURGE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE dim_book PURGE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE dim_date PURGE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP PACKAGE BODY pkg_csa_val_sens_star';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4043 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP PACKAGE pkg_csa_val_sens_star';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4043 THEN
            RAISE;
        END IF;
END;
/

CREATE TABLE dim_date (
    date_key          NUMBER(8)        NOT NULL,
    date_value        DATE             NOT NULL,
    day_number        NUMBER(2)        NOT NULL,
    day_name          VARCHAR2(9)      NOT NULL,
    week_number       NUMBER(2)        NOT NULL,
    month_number      NUMBER(2)        NOT NULL,
    month_name        VARCHAR2(9)      NOT NULL,
    quarter_number    NUMBER(1)        NOT NULL,
    year_number       NUMBER(4)        NOT NULL,
    is_weekend        CHAR(1)          NOT NULL,
    CONSTRAINT pk_dim_date PRIMARY KEY (date_key),
    CONSTRAINT uq_dim_date UNIQUE (date_value)
);

CREATE TABLE dim_book (
    book_key                NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rpl_book_id             NUMBER,
    rpl_book_code           VARCHAR2(60),
    rpl_book_name           VARCHAR2(60),
    rpl_book_description    VARCHAR2(100),
    rpl_unit_id             NUMBER(10,0),
    rpl_unit_name           VARCHAR2(200),
    rpl_location_id         NUMBER,
    rpl_loc_code            VARCHAR2(30),
    rpl_loc_name            VARCHAR2(30),
    rpl_loc_description     VARCHAR2(60),
    rpl_subsidiary_id       NUMBER,
    rpl_subs_code           VARCHAR2(30),
    rpl_subs_name           VARCHAR2(30),
    rpl_subs_description    VARCHAR2(255),
    rpl_book_trad_bank      VARCHAR2(10),
    rpl_book_prop_flow      VARCHAR2(10),
    risk_book               VARCHAR2(100),
    global_trader_book_id   VARCHAR2(50),
    gpc_book_code           VARCHAR2(100),
    gpc_book_name           VARCHAR2(100),
    natural_key             VARCHAR2(256) GENERATED ALWAYS AS (
                                NVL(TO_CHAR(rpl_book_id), '~') || '|' ||
                                NVL(rpl_book_code, '~') || '|' ||
                                NVL(TO_CHAR(rpl_unit_id), '~')
                              ) VIRTUAL,
    CONSTRAINT uq_dim_book_natural UNIQUE (natural_key)
);

CREATE TABLE dim_product (
    product_key              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    prds_product_code        VARCHAR2(60),
    gpc_product_code         VARCHAR2(30),
    upstream_product_category VARCHAR2(50),
    upstream_product_code    VARCHAR2(100),
    category                 VARCHAR2(11),
    pkg_type                 VARCHAR2(20),
    pkg_id                   NUMBER(20,0),
    pkg_name                 VARCHAR2(30),
    natural_key              VARCHAR2(300) GENERATED ALWAYS AS (
                                NVL(prds_product_code, '~') || '|' ||
                                NVL(gpc_product_code, '~') || '|' ||
                                NVL(upstream_product_code, '~')
                              ) VIRTUAL,
    CONSTRAINT uq_dim_product_natural UNIQUE (natural_key)
);

CREATE TABLE dim_instrument (
    instrument_key   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    instrument_id    NUMBER,
    issuer_id        NUMBER,
    issuer_name      VARCHAR2(100),
    issuer_code      VARCHAR2(70),
    security_name    VARCHAR2(140),
    CONSTRAINT uq_dim_instrument UNIQUE (instrument_id)
);

CREATE TABLE dim_trade (
    trade_key                      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    trade_id                       VARCHAR2(100),
    deal_id                        VARCHAR2(80),
    instrument_id                  NUMBER,
    trade_book                     VARCHAR2(200),
    contract_name                  VARCHAR2(80),
    contract_size                  NUMBER,
    quantity                       NUMBER(22,0),
    strike_price                   NUMBER(22,0),
    call_put_ind                   VARCHAR2(1),
    buy_sell_flag                  VARCHAR2(1),
    implied_volatility             NUMBER,
    moneyness                      NUMBER(22,0),
    moneyness_percentage           VARCHAR2(30),
    trade_maturity_date            DATE,
    upstream_curve_name            VARCHAR2(50),
    trade_capture_system           VARCHAR2(50),
    covered_positions_us_ihc_ind   VARCHAR2(1),
    CONSTRAINT uq_dim_trade UNIQUE (trade_id, deal_id, instrument_id)
);

CREATE TABLE dim_risk_factor (
    risk_factor_key            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    risk_factor_code           VARCHAR2(255),
    risk_factor_name           VARCHAR2(100),
    risk_class                 VARCHAR2(3),
    risk_type_code             VARCHAR2(40),
    reporting_agg_code         VARCHAR2(40),
    reporting_tenor1           VARCHAR2(10),
    reporting_tenor2           VARCHAR2(10),
    tenor1                     NUMBER(20,0),
    tenor2                     NUMBER(20,0),
    spot_ts_label              VARCHAR2(255),
    vol_ts_label               VARCHAR2(255),
    ers_ts_label               VARCHAR2(255),
    upstream_risk_type         VARCHAR2(50),
    risk_strategy              VARCHAR2(50),
    risk_factor_currency_code  VARCHAR2(3),
    risk_factor_country_code   VARCHAR2(3),
    risk_factor_rating         VARCHAR2(10),
    reporting_currency_1       VARCHAR2(60),
    reporting_currency_2       VARCHAR2(60),
    scenario_benchmark_code    VARCHAR2(255),
    bpv_ind                    CHAR(4),
    performing_asset_indicator VARCHAR2(1),
    CONSTRAINT uq_dim_risk_factor UNIQUE (risk_factor_code)
);

CREATE TABLE dim_source (
    source_key               NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    filename                 VARCHAR2(100),
    file_version             NUMBER,
    file_1                   VARCHAR2(100),
    trigger_file             VARCHAR2(50),
    source                   VARCHAR2(3),
    flash_official           VARCHAR2(1),
    upstream_source_system   VARCHAR2(50),
    forp_system              VARCHAR2(3),
    feed_cob_date            DATE,
    rpl_cob_date             DATE,
    upload_date_str          VARCHAR2(40),
    dsloadid                 VARCHAR2(40),
    source_exp_seq_id        NUMBER(20,0),
    exp_seq_id               NUMBER(20,0),
    pkg_id                   NUMBER(20,0),
    pkg_name                 VARCHAR2(30),
    pkg_type                 VARCHAR2(20),
    CONSTRAINT uq_dim_source UNIQUE (filename, file_version, source_exp_seq_id)
);

CREATE TABLE fact_csa_val_sens (
    fact_key                  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cob_date                  DATE             NOT NULL,
    cob_date_key              NUMBER(8)        NOT NULL,
    book_key                  NUMBER           NOT NULL,
    product_key               NUMBER           NOT NULL,
    instrument_key            NUMBER,
    trade_key                 NUMBER,
    risk_factor_key           NUMBER           NOT NULL,
    source_key                NUMBER           NOT NULL,
    risk_amount               NUMBER(32,10),
    risk_amount_euro          NUMBER(32,10),
    risk_amount_usd           NUMBER(32,10),
    risk_amount_currency_code VARCHAR2(100),
    grain_id                  VARCHAR2(60),
    CONSTRAINT fk_fact_date FOREIGN KEY (cob_date_key) REFERENCES dim_date (date_key),
    CONSTRAINT fk_fact_book FOREIGN KEY (book_key) REFERENCES dim_book (book_key),
    CONSTRAINT fk_fact_product FOREIGN KEY (product_key) REFERENCES dim_product (product_key),
    CONSTRAINT fk_fact_instrument FOREIGN KEY (instrument_key) REFERENCES dim_instrument (instrument_key),
    CONSTRAINT fk_fact_trade FOREIGN KEY (trade_key) REFERENCES dim_trade (trade_key),
    CONSTRAINT fk_fact_risk_factor FOREIGN KEY (risk_factor_key) REFERENCES dim_risk_factor (risk_factor_key),
    CONSTRAINT fk_fact_source FOREIGN KEY (source_key) REFERENCES dim_source (source_key)
)
PARTITION BY RANGE (cob_date)
INTERVAL (NUMTODSINTERVAL(1, 'DAY'))
(
    PARTITION p_start VALUES LESS THAN (DATE '2020-01-01')
);

CREATE BITMAP INDEX bix_fact_csa_val_sens_book
    ON fact_csa_val_sens (book_key)
    LOCAL;

CREATE BITMAP INDEX bix_fact_csa_val_sens_product
    ON fact_csa_val_sens (product_key)
    LOCAL;

CREATE INDEX idx_fct_csa_rf
    ON fact_csa_val_sens (risk_factor_key)
    LOCAL;

CREATE INDEX idx_fact_csa_val_sens_trade
    ON fact_csa_val_sens (trade_key)
    LOCAL;

CREATE INDEX idx_fct_csa_instr
    ON fact_csa_val_sens (instrument_key)
    LOCAL;

CREATE INDEX idx_fact_csa_val_sens_cob_key
    ON fact_csa_val_sens (cob_date_key);

CREATE OR REPLACE PACKAGE pkg_csa_val_sens_star AS
    PROCEDURE load_day(p_cob_date IN DATE);
    PROCEDURE load_range(p_start_date IN DATE, p_end_date IN DATE);
END pkg_csa_val_sens_star;
/

CREATE OR REPLACE PACKAGE BODY pkg_csa_val_sens_star AS

    PROCEDURE ensure_dim_date(p_date IN DATE) IS
    BEGIN
        MERGE INTO dim_date d
        USING (SELECT p_date AS date_value FROM dual) s
        ON (d.date_value = s.date_value)
        WHEN NOT MATCHED THEN
            INSERT (date_key,
                    date_value,
                    day_number,
                    day_name,
                    week_number,
                    month_number,
                    month_name,
                    quarter_number,
                    year_number,
                    is_weekend)
            VALUES (TO_NUMBER(TO_CHAR(s.date_value, 'YYYYMMDD')),
                    s.date_value,
                    TO_NUMBER(TO_CHAR(s.date_value, 'DD')),
                    RTRIM(TO_CHAR(s.date_value, 'DAY')),
                    TO_NUMBER(TO_CHAR(s.date_value, 'IW')),
                    TO_NUMBER(TO_CHAR(s.date_value, 'MM')),
                    RTRIM(TO_CHAR(s.date_value, 'MONTH')),
                    TO_NUMBER(TO_CHAR(s.date_value, 'Q')),
                    TO_NUMBER(TO_CHAR(s.date_value, 'YYYY')),
                    CASE WHEN TO_CHAR(s.date_value, 'DY') IN ('SAT', 'SUN') THEN 'Y' ELSE 'N' END);
    END ensure_dim_date;

    PROCEDURE merge_dim_book(p_cob_date IN DATE) IS
    BEGIN
        MERGE INTO dim_book tgt
        USING (
            SELECT DISTINCT
                   rpl_book_id,
                   rpl_book_code,
                   rpl_book_name,
                   rpl_book_description,
                   rpl_unit_id,
                   rpl_unit_name,
                   rpl_location_id,
                   rpl_loc_code,
                   rpl_loc_name,
                   rpl_loc_description,
                   rpl_subsidiary_id,
                   rpl_subs_code,
                   rpl_subs_name,
                   rpl_subs_description,
                   rpl_book_trad_bank,
                   rpl_book_prop_flow,
                   risk_book,
                   global_trader_book_id,
                   gpc_book_code,
                   gpc_book_name
            FROM mds_csa_val_sensitivities_v2
            WHERE cob_date = p_cob_date
        ) src
        ON (
            NVL(tgt.rpl_book_id, -1) = NVL(src.rpl_book_id, -1)
            AND NVL(tgt.rpl_book_code, '~') = NVL(src.rpl_book_code, '~')
            AND NVL(tgt.rpl_unit_id, -1) = NVL(src.rpl_unit_id, -1)
        )
        WHEN MATCHED THEN
            UPDATE SET
                tgt.rpl_book_name         = src.rpl_book_name,
                tgt.rpl_book_description  = src.rpl_book_description,
                tgt.rpl_unit_name         = src.rpl_unit_name,
                tgt.rpl_location_id       = src.rpl_location_id,
                tgt.rpl_loc_code          = src.rpl_loc_code,
                tgt.rpl_loc_name          = src.rpl_loc_name,
                tgt.rpl_loc_description   = src.rpl_loc_description,
                tgt.rpl_subsidiary_id     = src.rpl_subsidiary_id,
                tgt.rpl_subs_code         = src.rpl_subs_code,
                tgt.rpl_subs_name         = src.rpl_subs_name,
                tgt.rpl_subs_description  = src.rpl_subs_description,
                tgt.rpl_book_trad_bank    = src.rpl_book_trad_bank,
                tgt.rpl_book_prop_flow    = src.rpl_book_prop_flow,
                tgt.risk_book             = src.risk_book,
                tgt.global_trader_book_id = src.global_trader_book_id,
                tgt.gpc_book_code         = src.gpc_book_code,
                tgt.gpc_book_name         = src.gpc_book_name
        WHEN NOT MATCHED THEN
            INSERT (
                rpl_book_id,
                rpl_book_code,
                rpl_book_name,
                rpl_book_description,
                rpl_unit_id,
                rpl_unit_name,
                rpl_location_id,
                rpl_loc_code,
                rpl_loc_name,
                rpl_loc_description,
                rpl_subsidiary_id,
                rpl_subs_code,
                rpl_subs_name,
                rpl_subs_description,
                rpl_book_trad_bank,
                rpl_book_prop_flow,
                risk_book,
                global_trader_book_id,
                gpc_book_code,
                gpc_book_name
            )
            VALUES (
                src.rpl_book_id,
                src.rpl_book_code,
                src.rpl_book_name,
                src.rpl_book_description,
                src.rpl_unit_id,
                src.rpl_unit_name,
                src.rpl_location_id,
                src.rpl_loc_code,
                src.rpl_loc_name,
                src.rpl_loc_description,
                src.rpl_subsidiary_id,
                src.rpl_subs_code,
                src.rpl_subs_name,
                src.rpl_subs_description,
                src.rpl_book_trad_bank,
                src.rpl_book_prop_flow,
                src.risk_book,
                src.global_trader_book_id,
                src.gpc_book_code,
                src.gpc_book_name
            );
    END merge_dim_book;

    PROCEDURE merge_dim_product(p_cob_date IN DATE) IS
    BEGIN
        MERGE INTO dim_product tgt
        USING (
            SELECT DISTINCT
                   prds_product_code,
                   gpc_product_code,
                   upstream_product_category,
                   upstream_product_code,
                   category,
                   pkg_type,
                   pkg_id,
                   pkg_name
            FROM mds_csa_val_sensitivities_v2
            WHERE cob_date = p_cob_date
        ) src
        ON (
            NVL(tgt.prds_product_code, '~') = NVL(src.prds_product_code, '~')
            AND NVL(tgt.gpc_product_code, '~') = NVL(src.gpc_product_code, '~')
            AND NVL(tgt.upstream_product_code, '~') = NVL(src.upstream_product_code, '~')
        )
        WHEN MATCHED THEN
            UPDATE SET
                tgt.upstream_product_category = src.upstream_product_category,
                tgt.category                 = src.category,
                tgt.pkg_type                 = src.pkg_type,
                tgt.pkg_id                   = src.pkg_id,
                tgt.pkg_name                 = src.pkg_name
        WHEN NOT MATCHED THEN
            INSERT (
                prds_product_code,
                gpc_product_code,
                upstream_product_category,
                upstream_product_code,
                category,
                pkg_type,
                pkg_id,
                pkg_name
            )
            VALUES (
                src.prds_product_code,
                src.gpc_product_code,
                src.upstream_product_category,
                src.upstream_product_code,
                src.category,
                src.pkg_type,
                src.pkg_id,
                src.pkg_name
            );
    END merge_dim_product;

    PROCEDURE merge_dim_instrument(p_cob_date IN DATE) IS
    BEGIN
        MERGE INTO dim_instrument tgt
        USING (
            SELECT DISTINCT
                   instrument_id,
                   issuer_id,
                   issuer_name,
                   issuer_code,
                   securityname
            FROM mds_csa_val_sensitivities_v2
            WHERE cob_date = p_cob_date
        ) src
        ON (tgt.instrument_id = src.instrument_id)
        WHEN MATCHED THEN
            UPDATE SET
                tgt.issuer_id   = src.issuer_id,
                tgt.issuer_name = src.issuer_name,
                tgt.issuer_code = src.issuer_code,
                tgt.security_name = src.securityname
        WHEN NOT MATCHED THEN
            INSERT (
                instrument_id,
                issuer_id,
                issuer_name,
                issuer_code,
                security_name
            )
            VALUES (
                src.instrument_id,
                src.issuer_id,
                src.issuer_name,
                src.issuer_code,
                src.securityname
            );
    END merge_dim_instrument;

    PROCEDURE merge_dim_trade(p_cob_date IN DATE) IS
    BEGIN
        MERGE INTO dim_trade tgt
        USING (
            SELECT DISTINCT
                   trade_id,
                   deal_id,
                   instrument_id,
                   trade_book,
                   contract_name,
                   contract_size,
                   quantity,
                   strike_price,
                   call_put_ind,
                   buy_sell_flag,
                   implied_volatility,
                   moneyness,
                   moneyness_percentage,
                   trade_maturity_date,
                   upstream_curve_name,
                   trade_capture_system,
                   covered_positions_us_ihc_ind
            FROM mds_csa_val_sensitivities_v2
            WHERE cob_date = p_cob_date
        ) src
        ON (
            NVL(tgt.trade_id, '~') = NVL(src.trade_id, '~')
            AND NVL(tgt.deal_id, '~') = NVL(src.deal_id, '~')
            AND NVL(tgt.instrument_id, -1) = NVL(src.instrument_id, -1)
        )
        WHEN MATCHED THEN
            UPDATE SET
                tgt.trade_book                   = src.trade_book,
                tgt.contract_name                = src.contract_name,
                tgt.contract_size                = src.contract_size,
                tgt.quantity                     = src.quantity,
                tgt.strike_price                 = src.strike_price,
                tgt.call_put_ind                 = src.call_put_ind,
                tgt.buy_sell_flag                = src.buy_sell_flag,
                tgt.implied_volatility           = src.implied_volatility,
                tgt.moneyness                    = src.moneyness,
                tgt.moneyness_percentage         = src.moneyness_percentage,
                tgt.trade_maturity_date          = src.trade_maturity_date,
                tgt.upstream_curve_name          = src.upstream_curve_name,
                tgt.trade_capture_system         = src.trade_capture_system,
                tgt.covered_positions_us_ihc_ind = src.covered_positions_us_ihc_ind
        WHEN NOT MATCHED THEN
            INSERT (
                trade_id,
                deal_id,
                instrument_id,
                trade_book,
                contract_name,
                contract_size,
                quantity,
                strike_price,
                call_put_ind,
                buy_sell_flag,
                implied_volatility,
                moneyness,
                moneyness_percentage,
                trade_maturity_date,
                upstream_curve_name,
                trade_capture_system,
                covered_positions_us_ihc_ind
            )
            VALUES (
                src.trade_id,
                src.deal_id,
                src.instrument_id,
                src.trade_book,
                src.contract_name,
                src.contract_size,
                src.quantity,
                src.strike_price,
                src.call_put_ind,
                src.buy_sell_flag,
                src.implied_volatility,
                src.moneyness,
                src.moneyness_percentage,
                src.trade_maturity_date,
                src.upstream_curve_name,
                src.trade_capture_system,
                src.covered_positions_us_ihc_ind
            );
    END merge_dim_trade;

    PROCEDURE merge_dim_risk_factor(p_cob_date IN DATE) IS
    BEGIN
        MERGE INTO dim_risk_factor tgt
        USING (
            SELECT DISTINCT
                   risk_factor_code,
                   risk_factor_name,
                   risk_class,
                   risk_type_code,
                   reporting_agg_code,
                   reporting_tenor1,
                   reporting_tenor2,
                   tenor1,
                   tenor2,
                   spot_ts_label,
                   vol_ts_label,
                   ers_ts_label,
                   upstream_risk_type,
                   risk_strategy,
                   risk_factor_currency_code,
                   risk_factor_country_code,
                   risk_factor_rating,
                   reporting_currency_1,
                   reporting_currency_2,
                   scenario_benchmark_code,
                   bpv_ind,
                   perfoming_asset_indicator
            FROM mds_csa_val_sensitivities_v2
            WHERE cob_date = p_cob_date
        ) src
        ON (tgt.risk_factor_code = src.risk_factor_code)
        WHEN MATCHED THEN
            UPDATE SET
                tgt.risk_factor_name          = src.risk_factor_name,
                tgt.risk_class                = src.risk_class,
                tgt.risk_type_code            = src.risk_type_code,
                tgt.reporting_agg_code        = src.reporting_agg_code,
                tgt.reporting_tenor1          = src.reporting_tenor1,
                tgt.reporting_tenor2          = src.reporting_tenor2,
                tgt.tenor1                    = src.tenor1,
                tgt.tenor2                    = src.tenor2,
                tgt.spot_ts_label             = src.spot_ts_label,
                tgt.vol_ts_label              = src.vol_ts_label,
                tgt.ers_ts_label              = src.ers_ts_label,
                tgt.upstream_risk_type        = src.upstream_risk_type,
                tgt.risk_strategy             = src.risk_strategy,
                tgt.risk_factor_currency_code = src.risk_factor_currency_code,
                tgt.risk_factor_country_code  = src.risk_factor_country_code,
                tgt.risk_factor_rating        = src.risk_factor_rating,
                tgt.reporting_currency_1      = src.reporting_currency_1,
                tgt.reporting_currency_2      = src.reporting_currency_2,
                tgt.scenario_benchmark_code   = src.scenario_benchmark_code,
                tgt.bpv_ind                   = src.bpv_ind,
                tgt.performing_asset_indicator = src.perfoming_asset_indicator
        WHEN NOT MATCHED THEN
            INSERT (
                risk_factor_code,
                risk_factor_name,
                risk_class,
                risk_type_code,
                reporting_agg_code,
                reporting_tenor1,
                reporting_tenor2,
                tenor1,
                tenor2,
                spot_ts_label,
                vol_ts_label,
                ers_ts_label,
                upstream_risk_type,
                risk_strategy,
                risk_factor_currency_code,
                risk_factor_country_code,
                risk_factor_rating,
                reporting_currency_1,
                reporting_currency_2,
                scenario_benchmark_code,
                bpv_ind,
                performing_asset_indicator
            )
            VALUES (
                src.risk_factor_code,
                src.risk_factor_name,
                src.risk_class,
                src.risk_type_code,
                src.reporting_agg_code,
                src.reporting_tenor1,
                src.reporting_tenor2,
                src.tenor1,
                src.tenor2,
                src.spot_ts_label,
                src.vol_ts_label,
                src.ers_ts_label,
                src.upstream_risk_type,
                src.risk_strategy,
                src.risk_factor_currency_code,
                src.risk_factor_country_code,
                src.risk_factor_rating,
                src.reporting_currency_1,
                src.reporting_currency_2,
                src.scenario_benchmark_code,
                src.bpv_ind,
                src.perfoming_asset_indicator
            );
    END merge_dim_risk_factor;

    PROCEDURE merge_dim_source(p_cob_date IN DATE) IS
    BEGIN
        MERGE INTO dim_source tgt
        USING (
            SELECT DISTINCT
                   filename,
                   file_version,
                   file_1,
                   trigger_file,
                   source,
                   flash_official,
                   upstream_source_system,
                   forp_system,
                   feed_cob_date,
                   rpl_cob_date,
                   uploaddate,
                   dsloadid,
                   source_exp_seq_id,
                   exp_seq_id,
                   pkg_id,
                   pkg_name,
                   pkg_type
            FROM mds_csa_val_sensitivities_v2
            WHERE cob_date = p_cob_date
        ) src
        ON (
            NVL(tgt.filename, '~') = NVL(src.filename, '~')
            AND NVL(tgt.file_version, -1) = NVL(src.file_version, -1)
            AND NVL(tgt.source_exp_seq_id, -1) = NVL(src.source_exp_seq_id, -1)
        )
        WHEN MATCHED THEN
            UPDATE SET
                tgt.file_1                 = src.file_1,
                tgt.trigger_file           = src.trigger_file,
                tgt.source                 = src.source,
                tgt.flash_official         = src.flash_official,
                tgt.upstream_source_system = src.upstream_source_system,
                tgt.forp_system            = src.forp_system,
                tgt.feed_cob_date          = src.feed_cob_date,
                tgt.rpl_cob_date           = src.rpl_cob_date,
                tgt.upload_date_str        = src.uploaddate,
                tgt.dsloadid               = src.dsloadid,
                tgt.exp_seq_id             = src.exp_seq_id,
                tgt.pkg_id                 = src.pkg_id,
                tgt.pkg_name               = src.pkg_name,
                tgt.pkg_type               = src.pkg_type
        WHEN NOT MATCHED THEN
            INSERT (
                filename,
                file_version,
                file_1,
                trigger_file,
                source,
                flash_official,
                upstream_source_system,
                forp_system,
                feed_cob_date,
                rpl_cob_date,
                upload_date_str,
                dsloadid,
                source_exp_seq_id,
                exp_seq_id,
                pkg_id,
                pkg_name,
                pkg_type
            )
            VALUES (
                src.filename,
                src.file_version,
                src.file_1,
                src.trigger_file,
                src.source,
                src.flash_official,
                src.upstream_source_system,
                src.forp_system,
                src.feed_cob_date,
                src.rpl_cob_date,
                src.uploaddate,
                src.dsloadid,
                src.source_exp_seq_id,
                src.exp_seq_id,
                src.pkg_id,
                src.pkg_name,
                src.pkg_type
            );
    END merge_dim_source;

    PROCEDURE delete_fact_day(p_cob_date IN DATE) IS
    BEGIN
        DELETE FROM fact_csa_val_sens WHERE cob_date = p_cob_date;
    END delete_fact_day;

    PROCEDURE insert_fact_day(p_cob_date IN DATE) IS
    BEGIN
        INSERT /*+ APPEND */ INTO fact_csa_val_sens (
            cob_date,
            cob_date_key,
            book_key,
            product_key,
            instrument_key,
            trade_key,
            risk_factor_key,
            source_key,
            risk_amount,
            risk_amount_euro,
            risk_amount_usd,
            risk_amount_currency_code,
            grain_id
        )
        SELECT
            src.cob_date,
            TO_NUMBER(TO_CHAR(src.cob_date, 'YYYYMMDD')),
            b.book_key,
            p.product_key,
            i.instrument_key,
            t.trade_key,
            rf.risk_factor_key,
            s.source_key,
            src.risk_amount,
            src.risk_amount_euro,
            src.risk_amount_usd,
            src.risk_amount_currency_code,
            src.grainid
        FROM mds_csa_val_sensitivities_v2 src
        JOIN dim_book b
            ON NVL(b.rpl_book_id, -1) = NVL(src.rpl_book_id, -1)
           AND NVL(b.rpl_book_code, '~') = NVL(src.rpl_book_code, '~')
           AND NVL(b.rpl_unit_id, -1) = NVL(src.rpl_unit_id, -1)
        JOIN dim_product p
            ON NVL(p.prds_product_code, '~') = NVL(src.prds_product_code, '~')
           AND NVL(p.gpc_product_code, '~') = NVL(src.gpc_product_code, '~')
           AND NVL(p.upstream_product_code, '~') = NVL(src.upstream_product_code, '~')
        LEFT JOIN dim_instrument i
            ON i.instrument_id = src.instrument_id
        LEFT JOIN dim_trade t
            ON NVL(t.trade_id, '~') = NVL(src.trade_id, '~')
           AND NVL(t.deal_id, '~') = NVL(src.deal_id, '~')
           AND NVL(t.instrument_id, -1) = NVL(src.instrument_id, -1)
        JOIN dim_risk_factor rf
            ON rf.risk_factor_code = src.risk_factor_code
        JOIN dim_source s
            ON NVL(s.filename, '~') = NVL(src.filename, '~')
           AND NVL(s.file_version, -1) = NVL(src.file_version, -1)
           AND NVL(s.source_exp_seq_id, -1) = NVL(src.source_exp_seq_id, -1)
        WHERE src.cob_date = p_cob_date;
    END insert_fact_day;

    PROCEDURE load_day(p_cob_date IN DATE) IS
    BEGIN
        ensure_dim_date(p_cob_date);
        merge_dim_book(p_cob_date);
        merge_dim_product(p_cob_date);
        merge_dim_instrument(p_cob_date);
        merge_dim_trade(p_cob_date);
        merge_dim_risk_factor(p_cob_date);
        merge_dim_source(p_cob_date);
        delete_fact_day(p_cob_date);
        insert_fact_day(p_cob_date);
        COMMIT;
    END load_day;

    PROCEDURE load_range(p_start_date IN DATE, p_end_date IN DATE) IS
        v_date DATE := p_start_date;
    BEGIN
        WHILE v_date <= p_end_date LOOP
            load_day(v_date);
            v_date := v_date + 1;
        END LOOP;
    END load_range;

END pkg_csa_val_sens_star;
/
